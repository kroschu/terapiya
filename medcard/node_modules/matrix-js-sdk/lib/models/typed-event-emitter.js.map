{"version":3,"file":"typed-event-emitter.js","names":["EventEmitterEvents","TypedEventEmitter","EventEmitter","addListener","event","listener","emit","args","eventNames","listenerCount","listeners","off","on","once","prependListener","prependOnceListener","removeAllListeners","removeListener","rawListeners"],"sources":["../../src/models/typed-event-emitter.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// eslint-disable-next-line no-restricted-imports\nimport { EventEmitter } from \"events\";\n\nexport enum EventEmitterEvents {\n    NewListener = \"newListener\",\n    RemoveListener = \"removeListener\",\n    Error = \"error\",\n}\n\ntype AnyListener = (...args: any) => any;\nexport type ListenerMap<E extends string> = { [eventName in E]: AnyListener };\ntype EventEmitterEventListener = (eventName: string, listener: AnyListener) => void;\ntype EventEmitterErrorListener = (error: Error) => void;\n\nexport type Listener<\n    E extends string,\n    A extends ListenerMap<E>,\n    T extends E | EventEmitterEvents,\n> = T extends E ? A[T]\n    : T extends EventEmitterEvents ? EventEmitterErrorListener\n    : EventEmitterEventListener;\n\n/**\n * Typed Event Emitter class which can act as a Base Model for all our model\n * and communication events.\n * This makes it much easier for us to distinguish between events, as we now need\n * to properly type this, so that our events are not stringly-based and prone\n * to silly typos.\n */\nexport class TypedEventEmitter<\n    Events extends string,\n    Arguments extends ListenerMap<Events>,\n    SuperclassArguments extends ListenerMap<any> = Arguments,\n> extends EventEmitter {\n    public addListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.addListener(event, listener);\n    }\n\n    public emit<T extends Events>(event: T, ...args: Parameters<SuperclassArguments[T]>): boolean;\n    public emit<T extends Events>(event: T, ...args: Parameters<Arguments[T]>): boolean;\n    public emit<T extends Events>(event: T, ...args: any[]): boolean {\n        return super.emit(event, ...args);\n    }\n\n    public eventNames(): (Events | EventEmitterEvents)[] {\n        return super.eventNames() as Array<Events | EventEmitterEvents>;\n    }\n\n    public listenerCount(event: Events | EventEmitterEvents): number {\n        return super.listenerCount(event);\n    }\n\n    public listeners(event: Events | EventEmitterEvents): Function[] {\n        return super.listeners(event);\n    }\n\n    public off<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.off(event, listener);\n    }\n\n    public on<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.on(event, listener);\n    }\n\n    public once<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.once(event, listener);\n    }\n\n    public prependListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.prependListener(event, listener);\n    }\n\n    public prependOnceListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.prependOnceListener(event, listener);\n    }\n\n    public removeAllListeners(event?: Events | EventEmitterEvents): this {\n        return super.removeAllListeners(event);\n    }\n\n    public removeListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.removeListener(event, listener);\n    }\n\n    public rawListeners(event: Events | EventEmitterEvents): Function[] {\n        return super.rawListeners(event);\n    }\n}\n"],"mappings":";;;;;;;AAiBA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;IAGYA,kB;;;WAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,kCAAAA,kB;;AAmBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAAN,SAIGC,oBAJH,CAIgB;EACZC,WAAW,CACdC,KADc,EAEdC,QAFc,EAGV;IACJ,OAAO,MAAMF,WAAN,CAAkBC,KAAlB,EAAyBC,QAAzB,CAAP;EACH;;EAIMC,IAAI,CAAmBF,KAAnB,EAA6B,GAAGG,IAAhC,EAAsD;IAC7D,OAAO,MAAMD,IAAN,CAAWF,KAAX,EAAkB,GAAGG,IAArB,CAAP;EACH;;EAEMC,UAAU,GAAoC;IACjD,OAAO,MAAMA,UAAN,EAAP;EACH;;EAEMC,aAAa,CAACL,KAAD,EAA6C;IAC7D,OAAO,MAAMK,aAAN,CAAoBL,KAApB,CAAP;EACH;;EAEMM,SAAS,CAACN,KAAD,EAAiD;IAC7D,OAAO,MAAMM,SAAN,CAAgBN,KAAhB,CAAP;EACH;;EAEMO,GAAG,CACNP,KADM,EAENC,QAFM,EAGF;IACJ,OAAO,MAAMM,GAAN,CAAUP,KAAV,EAAiBC,QAAjB,CAAP;EACH;;EAEMO,EAAE,CACLR,KADK,EAELC,QAFK,EAGD;IACJ,OAAO,MAAMO,EAAN,CAASR,KAAT,EAAgBC,QAAhB,CAAP;EACH;;EAEMQ,IAAI,CACPT,KADO,EAEPC,QAFO,EAGH;IACJ,OAAO,MAAMQ,IAAN,CAAWT,KAAX,EAAkBC,QAAlB,CAAP;EACH;;EAEMS,eAAe,CAClBV,KADkB,EAElBC,QAFkB,EAGd;IACJ,OAAO,MAAMS,eAAN,CAAsBV,KAAtB,EAA6BC,QAA7B,CAAP;EACH;;EAEMU,mBAAmB,CACtBX,KADsB,EAEtBC,QAFsB,EAGlB;IACJ,OAAO,MAAMU,mBAAN,CAA0BX,KAA1B,EAAiCC,QAAjC,CAAP;EACH;;EAEMW,kBAAkB,CAACZ,KAAD,EAA4C;IACjE,OAAO,MAAMY,kBAAN,CAAyBZ,KAAzB,CAAP;EACH;;EAEMa,cAAc,CACjBb,KADiB,EAEjBC,QAFiB,EAGb;IACJ,OAAO,MAAMY,cAAN,CAAqBb,KAArB,EAA4BC,QAA5B,CAAP;EACH;;EAEMa,YAAY,CAACd,KAAD,EAAiD;IAChE,OAAO,MAAMc,YAAN,CAAmBd,KAAnB,CAAP;EACH;;AA1EkB"}