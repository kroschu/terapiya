{"version":3,"file":"requests.js","names":[],"sources":["../../src/@types/requests.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Callback } from \"../client\";\nimport { IContent, IEvent } from \"../models/event\";\nimport { Preset, Visibility } from \"./partials\";\nimport { IEventWithRoomId, SearchKey } from \"./search\";\nimport { IRoomEventFilter } from \"../filter\";\nimport { Direction } from \"../models/event-timeline\";\nimport { PushRuleAction } from \"./PushRules\";\nimport { IRoomEvent } from \"../sync-accumulator\";\nimport { RoomType } from \"./event\";\n\n// allow camelcase as these are things that go onto the wire\n/* eslint-disable camelcase */\n\nexport interface IJoinRoomOpts {\n    /**\n     * True to do a room initial sync on the resulting\n     * room. If false, the <strong>returned Room object will have no current state.\n     * </strong> Default: true.\n     */\n    syncRoom?: boolean;\n\n    /**\n     * If the caller has a keypair 3pid invite, the signing URL is passed in this parameter.\n     */\n    inviteSignUrl?: string;\n\n    /**\n     * The server names to try and join through in addition to those that are automatically chosen.\n     */\n    viaServers?: string[];\n}\n\nexport interface IRedactOpts {\n    reason?: string;\n}\n\nexport interface ISendEventResponse {\n    event_id: string;\n}\n\nexport interface IPresenceOpts {\n    presence: \"online\" | \"offline\" | \"unavailable\";\n    status_msg?: string;\n}\n\nexport interface IPaginateOpts {\n    backwards?: boolean;\n    limit?: number;\n}\n\nexport interface IGuestAccessOpts {\n    allowJoin: boolean;\n    allowRead: boolean;\n}\n\nexport interface ISearchOpts {\n    keys?: SearchKey[];\n    query: string;\n}\n\nexport interface IEventSearchOpts {\n    filter?: IRoomEventFilter;\n    term: string;\n}\n\nexport interface IInvite3PID {\n    id_server: string;\n    id_access_token?: string; // this gets injected by the js-sdk\n    medium: string;\n    address: string;\n}\n\nexport interface ICreateRoomStateEvent {\n    type: string;\n    state_key?: string; // defaults to an empty string\n    content: IContent;\n}\n\nexport interface ICreateRoomOpts {\n    room_alias_name?: string;\n    visibility?: Visibility;\n    name?: string;\n    topic?: string;\n    preset?: Preset;\n    power_level_content_override?: object;\n    creation_content?: object;\n    initial_state?: ICreateRoomStateEvent[];\n    invite?: string[];\n    invite_3pid?: IInvite3PID[];\n    is_direct?: boolean;\n    room_version?: string;\n}\n\nexport interface IRoomDirectoryOptions {\n    server?: string;\n    limit?: number;\n    since?: string;\n    filter?: {\n        generic_search_term?: string;\n        room_types?: Array<RoomType | null>;\n    };\n    include_all_networks?: boolean;\n    third_party_instance_id?: string;\n}\n\nexport interface IUploadOpts {\n    name?: string;\n    includeFilename?: boolean;\n    type?: string;\n    rawResponse?: boolean;\n    onlyContentUri?: boolean;\n    callback?: Callback;\n    progressHandler?: (state: {loaded: number, total: number}) => void;\n}\n\nexport interface IAddThreePidOnlyBody {\n    auth?: {\n        type: string;\n        session?: string;\n    };\n    client_secret: string;\n    sid: string;\n}\n\nexport interface IBindThreePidBody {\n    client_secret: string;\n    id_server: string;\n    id_access_token: string;\n    sid: string;\n}\n\nexport interface IRelationsRequestOpts {\n    from?: string;\n    to?: string;\n    limit?: number;\n    direction?: Direction;\n}\n\nexport interface IRelationsResponse {\n    original_event: IEvent;\n    chunk: IEvent[];\n    next_batch?: string;\n    prev_batch?: string;\n}\n\nexport interface IContextResponse {\n    end: string;\n    start: string;\n    state: IEventWithRoomId[];\n    events_before: IEventWithRoomId[];\n    events_after: IEventWithRoomId[];\n    event: IEventWithRoomId;\n}\n\nexport interface IEventsResponse {\n    chunk: IEventWithRoomId[];\n    end: string;\n    start: string;\n}\n\nexport interface INotification {\n    actions: PushRuleAction[];\n    event: IRoomEvent;\n    profile_tag?: string;\n    read: boolean;\n    room_id: string;\n    ts: number;\n}\n\nexport interface INotificationsResponse {\n    next_token: string;\n    notifications: INotification[];\n}\n\nexport interface IFilterResponse {\n    filter_id: string;\n}\n\nexport interface ITagsResponse {\n    tags: {\n        [tagId: string]: {\n            order: number;\n        };\n    };\n}\n\nexport interface IStatusResponse extends IPresenceOpts {\n    currently_active?: boolean;\n    last_active_ago?: number;\n}\n\n/* eslint-enable camelcase */\n"],"mappings":""}