{"version":3,"file":"callFeed.js","names":["POLLING_INTERVAL","SPEAKING_THRESHOLD","SPEAKING_SAMPLE_COUNT","CallFeedEvent","CallFeed","TypedEventEmitter","constructor","opts","emit","NewStream","stream","analyser","measuringVolumeActivity","getFloatFrequencyData","frequencyBinCount","maxVolume","Infinity","i","length","speakingVolumeSamples","shift","push","VolumeChanged","newSpeaking","volume","speakingThreshold","speaking","Speaking","volumeLooperTimeout","setTimeout","volumeLooper","client","roomId","userId","purpose","audioMuted","videoMuted","Array","fill","updateStream","hasAudioTrack","initVolumeMeasuring","getAudioTracks","oldStream","newStream","removeEventListener","onAddTrack","measureVolumeActivity","addEventListener","AudioContext","window","webkitAudioContext","audioContext","createAnalyser","fftSize","smoothingTimeConstant","mediaStreamAudioSourceNode","createMediaStreamSource","connect","Float32Array","getMember","callRoom","getRoom","isLocal","getUserId","isAudioMuted","isVideoMuted","getVideoTracks","isSpeaking","setAudioVideoMuted","MuteStateChanged","enabled","setSpeakingThreshold","threshold","dispose","clearTimeout"],"sources":["../../src/webrtc/callFeed.ts"],"sourcesContent":["/*\nCopyright 2021 Å imon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { SDPStreamMetadataPurpose } from \"./callEventTypes\";\nimport { MatrixClient } from \"../client\";\nimport { RoomMember } from \"../models/room-member\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\n\nconst POLLING_INTERVAL = 200; // ms\nexport const SPEAKING_THRESHOLD = -60; // dB\nconst SPEAKING_SAMPLE_COUNT = 8; // samples\n\nexport interface ICallFeedOpts {\n    client: MatrixClient;\n    roomId: string;\n    userId: string;\n    stream: MediaStream;\n    purpose: SDPStreamMetadataPurpose;\n    /**\n     * Whether or not the remote SDPStreamMetadata says audio is muted\n     */\n    audioMuted: boolean;\n    /**\n     * Whether or not the remote SDPStreamMetadata says video is muted\n     */\n    videoMuted: boolean;\n}\n\nexport enum CallFeedEvent {\n    NewStream = \"new_stream\",\n    MuteStateChanged = \"mute_state_changed\",\n    VolumeChanged = \"volume_changed\",\n    Speaking = \"speaking\",\n}\n\ntype EventHandlerMap = {\n    [CallFeedEvent.NewStream]: (stream: MediaStream) => void;\n    [CallFeedEvent.MuteStateChanged]: (audioMuted: boolean, videoMuted: boolean) => void;\n    [CallFeedEvent.VolumeChanged]: (volume: number) => void;\n    [CallFeedEvent.Speaking]: (speaking: boolean) => void;\n};\n\nexport class CallFeed extends TypedEventEmitter<CallFeedEvent, EventHandlerMap> {\n    public stream: MediaStream;\n    public userId: string;\n    public purpose: SDPStreamMetadataPurpose;\n    public speakingVolumeSamples: number[];\n\n    private client: MatrixClient;\n    private roomId: string;\n    private audioMuted: boolean;\n    private videoMuted: boolean;\n    private measuringVolumeActivity = false;\n    private audioContext: AudioContext;\n    private analyser: AnalyserNode;\n    private frequencyBinCount: Float32Array;\n    private speakingThreshold = SPEAKING_THRESHOLD;\n    private speaking = false;\n    private volumeLooperTimeout: ReturnType<typeof setTimeout>;\n\n    constructor(opts: ICallFeedOpts) {\n        super();\n\n        this.client = opts.client;\n        this.roomId = opts.roomId;\n        this.userId = opts.userId;\n        this.purpose = opts.purpose;\n        this.audioMuted = opts.audioMuted;\n        this.videoMuted = opts.videoMuted;\n        this.speakingVolumeSamples = new Array(SPEAKING_SAMPLE_COUNT).fill(-Infinity);\n\n        this.updateStream(null, opts.stream);\n\n        if (this.hasAudioTrack) {\n            this.initVolumeMeasuring();\n        }\n    }\n\n    private get hasAudioTrack(): boolean {\n        return this.stream.getAudioTracks().length > 0;\n    }\n\n    private updateStream(oldStream: MediaStream, newStream: MediaStream): void {\n        if (newStream === oldStream) return;\n\n        if (oldStream) {\n            oldStream.removeEventListener(\"addtrack\", this.onAddTrack);\n            this.measureVolumeActivity(false);\n        }\n        if (newStream) {\n            this.stream = newStream;\n            newStream.addEventListener(\"addtrack\", this.onAddTrack);\n\n            if (this.hasAudioTrack) {\n                this.initVolumeMeasuring();\n            } else {\n                this.measureVolumeActivity(false);\n            }\n        }\n\n        this.emit(CallFeedEvent.NewStream, this.stream);\n    }\n\n    private initVolumeMeasuring(): void {\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        if (!this.hasAudioTrack || !AudioContext) return;\n\n        this.audioContext = new AudioContext();\n\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 512;\n        this.analyser.smoothingTimeConstant = 0.1;\n\n        const mediaStreamAudioSourceNode = this.audioContext.createMediaStreamSource(this.stream);\n        mediaStreamAudioSourceNode.connect(this.analyser);\n\n        this.frequencyBinCount = new Float32Array(this.analyser.frequencyBinCount);\n    }\n\n    private onAddTrack = (): void => {\n        this.emit(CallFeedEvent.NewStream, this.stream);\n    };\n\n    /**\n     * Returns callRoom member\n     * @returns member of the callRoom\n     */\n    public getMember(): RoomMember {\n        const callRoom = this.client.getRoom(this.roomId);\n        return callRoom.getMember(this.userId);\n    }\n\n    /**\n     * Returns true if CallFeed is local, otherwise returns false\n     * @returns {boolean} is local?\n     */\n    public isLocal(): boolean {\n        return this.userId === this.client.getUserId();\n    }\n\n    /**\n     * Returns true if audio is muted or if there are no audio\n     * tracks, otherwise returns false\n     * @returns {boolean} is audio muted?\n     */\n    public isAudioMuted(): boolean {\n        return this.stream.getAudioTracks().length === 0 || this.audioMuted;\n    }\n\n    /**\n     * Returns true video is muted or if there are no video\n     * tracks, otherwise returns false\n     * @returns {boolean} is video muted?\n     */\n    public isVideoMuted(): boolean {\n        // We assume only one video track\n        return this.stream.getVideoTracks().length === 0 || this.videoMuted;\n    }\n\n    public isSpeaking(): boolean {\n        return this.speaking;\n    }\n\n    /**\n     * Set one or both of feed's internal audio and video video mute state\n     * Either value may be null to leave it as-is\n     * @param muted is the feed's video muted?\n     */\n    public setAudioVideoMuted(audioMuted: boolean, videoMuted: boolean): void {\n        if (audioMuted !== null) {\n            if (this.audioMuted !== audioMuted) {\n                this.speakingVolumeSamples.fill(-Infinity);\n            }\n            this.audioMuted = audioMuted;\n        }\n        if (videoMuted !== null) this.videoMuted = videoMuted;\n        this.emit(CallFeedEvent.MuteStateChanged, this.audioMuted, this.videoMuted);\n    }\n\n    /**\n     * Starts emitting volume_changed events where the emitter value is in decibels\n     * @param enabled emit volume changes\n     */\n    public measureVolumeActivity(enabled: boolean): void {\n        if (enabled) {\n            if (!this.audioContext || !this.analyser || !this.frequencyBinCount || !this.hasAudioTrack) return;\n\n            this.measuringVolumeActivity = true;\n            this.volumeLooper();\n        } else {\n            this.measuringVolumeActivity = false;\n            this.speakingVolumeSamples.fill(-Infinity);\n            this.emit(CallFeedEvent.VolumeChanged, -Infinity);\n        }\n    }\n\n    public setSpeakingThreshold(threshold: number) {\n        this.speakingThreshold = threshold;\n    }\n\n    private volumeLooper = () => {\n        if (!this.analyser) return;\n\n        if (!this.measuringVolumeActivity) return;\n\n        this.analyser.getFloatFrequencyData(this.frequencyBinCount);\n\n        let maxVolume = -Infinity;\n        for (let i = 0; i < this.frequencyBinCount.length; i++) {\n            if (this.frequencyBinCount[i] > maxVolume) {\n                maxVolume = this.frequencyBinCount[i];\n            }\n        }\n\n        this.speakingVolumeSamples.shift();\n        this.speakingVolumeSamples.push(maxVolume);\n\n        this.emit(CallFeedEvent.VolumeChanged, maxVolume);\n\n        let newSpeaking = false;\n\n        for (let i = 0; i < this.speakingVolumeSamples.length; i++) {\n            const volume = this.speakingVolumeSamples[i];\n\n            if (volume > this.speakingThreshold) {\n                newSpeaking = true;\n                break;\n            }\n        }\n\n        if (this.speaking !== newSpeaking) {\n            this.speaking = newSpeaking;\n            this.emit(CallFeedEvent.Speaking, this.speaking);\n        }\n\n        this.volumeLooperTimeout = setTimeout(this.volumeLooper, POLLING_INTERVAL);\n    };\n\n    public dispose(): void {\n        clearTimeout(this.volumeLooperTimeout);\n    }\n}\n"],"mappings":"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"}