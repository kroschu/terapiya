{"version":3,"file":"aes.js","names":["subtleCrypto","window","crypto","subtle","webkitSubtle","zeroSalt","Uint8Array","encryptNode","data","key","name","ivStr","getCrypto","Error","iv","decodeBase64","randomBytes","aesKey","hmacKey","deriveKeysNode","cipher","createCipheriv","ciphertext","Buffer","concat","update","final","hmac","createHmac","digest","encodeBase64","toString","mac","decryptNode","from","replace","decipher","createDecipheriv","prk","b","alloc","encryptBrowser","getRandomValues","deriveKeysBrowser","encodedData","TextEncoder","encode","encrypt","counter","length","sign","decryptBrowser","verify","plaintext","decrypt","TextDecoder","decode","hkdfkey","importKey","keybits","deriveBits","salt","info","hash","slice","aesProm","hmacProm","Promise","all","encryptAES","decryptAES","ZERO_STR","calculateKeyCheck"],"sources":["../../src/crypto/aes.ts"],"sourcesContent":["/*\nCopyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { BinaryLike } from \"crypto\";\nimport { getCrypto } from '../utils';\nimport { decodeBase64, encodeBase64 } from './olmlib';\n\nconst subtleCrypto = (typeof window !== \"undefined\" && window.crypto) ?\n    (window.crypto.subtle || window.crypto.webkitSubtle) : null;\n\n// salt for HKDF, with 8 bytes of zeros\nconst zeroSalt = new Uint8Array(8);\n\nexport interface IEncryptedPayload {\n    [key: string]: any; // extensible\n    iv?: string;\n    ciphertext?: string;\n    mac?: string;\n}\n\n/**\n * encrypt a string in Node.js\n *\n * @param {string} data the plaintext to encrypt\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n * @param {string} ivStr the initialization vector to use\n */\nasync function encryptNode(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    let iv;\n    if (ivStr) {\n        iv = decodeBase64(ivStr);\n    } else {\n        iv = crypto.randomBytes(16);\n\n        // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n        // (which would mean we wouldn't be able to decrypt on Android). The loss\n        // of a single bit of iv is a price we have to pay.\n        iv[8] &= 0x7f;\n    }\n\n    const [aesKey, hmacKey] = deriveKeysNode(key, name);\n\n    const cipher = crypto.createCipheriv(\"aes-256-ctr\", aesKey, iv);\n    const ciphertext = Buffer.concat([\n        cipher.update(data, \"utf8\"),\n        cipher.final(),\n    ]);\n\n    const hmac = crypto.createHmac(\"sha256\", hmacKey)\n        .update(ciphertext).digest(\"base64\");\n\n    return {\n        iv: encodeBase64(iv),\n        ciphertext: ciphertext.toString(\"base64\"),\n        mac: hmac,\n    };\n}\n\n/**\n * decrypt a string in Node.js\n *\n * @param {object} data the encrypted data\n * @param {string} data.ciphertext the ciphertext in base64\n * @param {string} data.iv the initialization vector in base64\n * @param {string} data.mac the HMAC in base64\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n */\nasync function decryptNode(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    const [aesKey, hmacKey] = deriveKeysNode(key, name);\n\n    const hmac = crypto.createHmac(\"sha256\", hmacKey)\n        .update(Buffer.from(data.ciphertext, \"base64\"))\n        .digest(\"base64\").replace(/=+$/g, '');\n\n    if (hmac !== data.mac.replace(/=+$/g, '')) {\n        throw new Error(`Error decrypting secret ${name}: bad MAC`);\n    }\n\n    const decipher = crypto.createDecipheriv(\n        \"aes-256-ctr\", aesKey, decodeBase64(data.iv),\n    );\n    return decipher.update(data.ciphertext, \"base64\", \"utf8\")\n          + decipher.final(\"utf8\");\n}\n\nfunction deriveKeysNode(key: BinaryLike, name: string): [Buffer, Buffer] {\n    const crypto = getCrypto();\n    const prk = crypto.createHmac(\"sha256\", zeroSalt).update(key).digest();\n\n    const b = Buffer.alloc(1, 1);\n    const aesKey = crypto.createHmac(\"sha256\", prk)\n        .update(name, \"utf8\").update(b).digest();\n    b[0] = 2;\n    const hmacKey = crypto.createHmac(\"sha256\", prk)\n        .update(aesKey).update(name, \"utf8\").update(b).digest();\n\n    return [aesKey, hmacKey];\n}\n\n/**\n * encrypt a string in Node.js\n *\n * @param {string} data the plaintext to encrypt\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n * @param {string} ivStr the initialization vector to use\n */\nasync function encryptBrowser(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    let iv;\n    if (ivStr) {\n        iv = decodeBase64(ivStr);\n    } else {\n        iv = new Uint8Array(16);\n        window.crypto.getRandomValues(iv);\n\n        // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n        // (which would mean we wouldn't be able to decrypt on Android). The loss\n        // of a single bit of iv is a price we have to pay.\n        iv[8] &= 0x7f;\n    }\n\n    const [aesKey, hmacKey] = await deriveKeysBrowser(key, name);\n    const encodedData = new TextEncoder().encode(data);\n\n    const ciphertext = await subtleCrypto.encrypt(\n        {\n            name: \"AES-CTR\",\n            counter: iv,\n            length: 64,\n        },\n        aesKey,\n        encodedData,\n    );\n\n    const hmac = await subtleCrypto.sign(\n        { name: 'HMAC' },\n        hmacKey,\n        ciphertext,\n    );\n\n    return {\n        iv: encodeBase64(iv),\n        ciphertext: encodeBase64(ciphertext),\n        mac: encodeBase64(hmac),\n    };\n}\n\n/**\n * decrypt a string in the browser\n *\n * @param {object} data the encrypted data\n * @param {string} data.ciphertext the ciphertext in base64\n * @param {string} data.iv the initialization vector in base64\n * @param {string} data.mac the HMAC in base64\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n */\nasync function decryptBrowser(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    const [aesKey, hmacKey] = await deriveKeysBrowser(key, name);\n\n    const ciphertext = decodeBase64(data.ciphertext);\n\n    if (!await subtleCrypto.verify(\n        { name: \"HMAC\" },\n        hmacKey,\n        decodeBase64(data.mac),\n        ciphertext,\n    )) {\n        throw new Error(`Error decrypting secret ${name}: bad MAC`);\n    }\n\n    const plaintext = await subtleCrypto.decrypt(\n        {\n            name: \"AES-CTR\",\n            counter: decodeBase64(data.iv),\n            length: 64,\n        },\n        aesKey,\n        ciphertext,\n    );\n\n    return new TextDecoder().decode(new Uint8Array(plaintext));\n}\n\nasync function deriveKeysBrowser(key: Uint8Array, name: string): Promise<[CryptoKey, CryptoKey]> {\n    const hkdfkey = await subtleCrypto.importKey(\n        'raw',\n        key,\n        { name: \"HKDF\" },\n        false,\n        [\"deriveBits\"],\n    );\n    const keybits = await subtleCrypto.deriveBits(\n        {\n            name: \"HKDF\",\n            salt: zeroSalt,\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore: https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/879\n            info: (new TextEncoder().encode(name)),\n            hash: \"SHA-256\",\n        },\n        hkdfkey,\n        512,\n    );\n\n    const aesKey = keybits.slice(0, 32);\n    const hmacKey = keybits.slice(32);\n\n    const aesProm = subtleCrypto.importKey(\n        'raw',\n        aesKey,\n        { name: 'AES-CTR' },\n        false,\n        ['encrypt', 'decrypt'],\n    );\n\n    const hmacProm = subtleCrypto.importKey(\n        'raw',\n        hmacKey,\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n        },\n        false,\n        ['sign', 'verify'],\n    );\n\n    return Promise.all([aesProm, hmacProm]);\n}\n\nexport function encryptAES(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    return subtleCrypto ? encryptBrowser(data, key, name, ivStr) : encryptNode(data, key, name, ivStr);\n}\n\nexport function decryptAES(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    return subtleCrypto ? decryptBrowser(data, key, name) : decryptNode(data, key, name);\n}\n\n// string of zeroes, for calculating the key check\nconst ZERO_STR = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/** Calculate the MAC for checking the key.\n *\n * @param {Uint8Array} key the key to use\n * @param {string} [iv] The initialization vector as a base64-encoded string.\n *     If omitted, a random initialization vector will be created.\n * @return {Promise<object>} An object that contains, `mac` and `iv` properties.\n */\nexport function calculateKeyCheck(key: Uint8Array, iv?: string): Promise<IEncryptedPayload> {\n    return encryptAES(ZERO_STR, key, \"\", iv);\n}\n"],"mappings":";;;;;;;;;AAiBA;;AACA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,MAAMA,YAAY,GAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,MAAzC,GAChBD,MAAM,CAACC,MAAP,CAAcC,MAAd,IAAwBF,MAAM,CAACC,MAAP,CAAcE,YADtB,GACsC,IAD3D,C,CAGA;;AACA,MAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAjB;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,WAAf,CAA2BC,IAA3B,EAAyCC,GAAzC,EAA0DC,IAA1D,EAAwEC,KAAxE,EAAoH;EAChH,MAAMT,MAAM,GAAG,IAAAU,gBAAA,GAAf;;EACA,IAAI,CAACV,MAAL,EAAa;IACT,MAAM,IAAIW,KAAJ,CAAU,iCAAV,CAAN;EACH;;EAED,IAAIC,EAAJ;;EACA,IAAIH,KAAJ,EAAW;IACPG,EAAE,GAAG,IAAAC,oBAAA,EAAaJ,KAAb,CAAL;EACH,CAFD,MAEO;IACHG,EAAE,GAAGZ,MAAM,CAACc,WAAP,CAAmB,EAAnB,CAAL,CADG,CAGH;IACA;IACA;;IACAF,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT;EACH;;EAED,MAAM,CAACG,MAAD,EAASC,OAAT,IAAoBC,cAAc,CAACV,GAAD,EAAMC,IAAN,CAAxC;EAEA,MAAMU,MAAM,GAAGlB,MAAM,CAACmB,cAAP,CAAsB,aAAtB,EAAqCJ,MAArC,EAA6CH,EAA7C,CAAf;EACA,MAAMQ,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,CAC7BJ,MAAM,CAACK,MAAP,CAAcjB,IAAd,EAAoB,MAApB,CAD6B,EAE7BY,MAAM,CAACM,KAAP,EAF6B,CAAd,CAAnB;EAKA,MAAMC,IAAI,GAAGzB,MAAM,CAAC0B,UAAP,CAAkB,QAAlB,EAA4BV,OAA5B,EACRO,MADQ,CACDH,UADC,EACWO,MADX,CACkB,QADlB,CAAb;EAGA,OAAO;IACHf,EAAE,EAAE,IAAAgB,oBAAA,EAAahB,EAAb,CADD;IAEHQ,UAAU,EAAEA,UAAU,CAACS,QAAX,CAAoB,QAApB,CAFT;IAGHC,GAAG,EAAEL;EAHF,CAAP;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeM,WAAf,CAA2BzB,IAA3B,EAAoDC,GAApD,EAAqEC,IAArE,EAAoG;EAChG,MAAMR,MAAM,GAAG,IAAAU,gBAAA,GAAf;;EACA,IAAI,CAACV,MAAL,EAAa;IACT,MAAM,IAAIW,KAAJ,CAAU,iCAAV,CAAN;EACH;;EAED,MAAM,CAACI,MAAD,EAASC,OAAT,IAAoBC,cAAc,CAACV,GAAD,EAAMC,IAAN,CAAxC;EAEA,MAAMiB,IAAI,GAAGzB,MAAM,CAAC0B,UAAP,CAAkB,QAAlB,EAA4BV,OAA5B,EACRO,MADQ,CACDF,MAAM,CAACW,IAAP,CAAY1B,IAAI,CAACc,UAAjB,EAA6B,QAA7B,CADC,EAERO,MAFQ,CAED,QAFC,EAESM,OAFT,CAEiB,MAFjB,EAEyB,EAFzB,CAAb;;EAIA,IAAIR,IAAI,KAAKnB,IAAI,CAACwB,GAAL,CAASG,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAAb,EAA2C;IACvC,MAAM,IAAItB,KAAJ,CAAW,2BAA0BH,IAAK,WAA1C,CAAN;EACH;;EAED,MAAM0B,QAAQ,GAAGlC,MAAM,CAACmC,gBAAP,CACb,aADa,EACEpB,MADF,EACU,IAAAF,oBAAA,EAAaP,IAAI,CAACM,EAAlB,CADV,CAAjB;EAGA,OAAOsB,QAAQ,CAACX,MAAT,CAAgBjB,IAAI,CAACc,UAArB,EAAiC,QAAjC,EAA2C,MAA3C,IACCc,QAAQ,CAACV,KAAT,CAAe,MAAf,CADR;AAEH;;AAED,SAASP,cAAT,CAAwBV,GAAxB,EAAyCC,IAAzC,EAAyE;EACrE,MAAMR,MAAM,GAAG,IAAAU,gBAAA,GAAf;EACA,MAAM0B,GAAG,GAAGpC,MAAM,CAAC0B,UAAP,CAAkB,QAAlB,EAA4BvB,QAA5B,EAAsCoB,MAAtC,CAA6ChB,GAA7C,EAAkDoB,MAAlD,EAAZ;EAEA,MAAMU,CAAC,GAAGhB,MAAM,CAACiB,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAV;EACA,MAAMvB,MAAM,GAAGf,MAAM,CAAC0B,UAAP,CAAkB,QAAlB,EAA4BU,GAA5B,EACVb,MADU,CACHf,IADG,EACG,MADH,EACWe,MADX,CACkBc,CADlB,EACqBV,MADrB,EAAf;EAEAU,CAAC,CAAC,CAAD,CAAD,GAAO,CAAP;EACA,MAAMrB,OAAO,GAAGhB,MAAM,CAAC0B,UAAP,CAAkB,QAAlB,EAA4BU,GAA5B,EACXb,MADW,CACJR,MADI,EACIQ,MADJ,CACWf,IADX,EACiB,MADjB,EACyBe,MADzB,CACgCc,CADhC,EACmCV,MADnC,EAAhB;EAGA,OAAO,CAACZ,MAAD,EAASC,OAAT,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeuB,cAAf,CAA8BjC,IAA9B,EAA4CC,GAA5C,EAA6DC,IAA7D,EAA2EC,KAA3E,EAAuH;EACnH,IAAIG,EAAJ;;EACA,IAAIH,KAAJ,EAAW;IACPG,EAAE,GAAG,IAAAC,oBAAA,EAAaJ,KAAb,CAAL;EACH,CAFD,MAEO;IACHG,EAAE,GAAG,IAAIR,UAAJ,CAAe,EAAf,CAAL;IACAL,MAAM,CAACC,MAAP,CAAcwC,eAAd,CAA8B5B,EAA9B,EAFG,CAIH;IACA;IACA;;IACAA,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT;EACH;;EAED,MAAM,CAACG,MAAD,EAASC,OAAT,IAAoB,MAAMyB,iBAAiB,CAAClC,GAAD,EAAMC,IAAN,CAAjD;EACA,MAAMkC,WAAW,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBtC,IAAzB,CAApB;EAEA,MAAMc,UAAU,GAAG,MAAMtB,YAAY,CAAC+C,OAAb,CACrB;IACIrC,IAAI,EAAE,SADV;IAEIsC,OAAO,EAAElC,EAFb;IAGImC,MAAM,EAAE;EAHZ,CADqB,EAMrBhC,MANqB,EAOrB2B,WAPqB,CAAzB;EAUA,MAAMjB,IAAI,GAAG,MAAM3B,YAAY,CAACkD,IAAb,CACf;IAAExC,IAAI,EAAE;EAAR,CADe,EAEfQ,OAFe,EAGfI,UAHe,CAAnB;EAMA,OAAO;IACHR,EAAE,EAAE,IAAAgB,oBAAA,EAAahB,EAAb,CADD;IAEHQ,UAAU,EAAE,IAAAQ,oBAAA,EAAaR,UAAb,CAFT;IAGHU,GAAG,EAAE,IAAAF,oBAAA,EAAaH,IAAb;EAHF,CAAP;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAewB,cAAf,CAA8B3C,IAA9B,EAAuDC,GAAvD,EAAwEC,IAAxE,EAAuG;EACnG,MAAM,CAACO,MAAD,EAASC,OAAT,IAAoB,MAAMyB,iBAAiB,CAAClC,GAAD,EAAMC,IAAN,CAAjD;EAEA,MAAMY,UAAU,GAAG,IAAAP,oBAAA,EAAaP,IAAI,CAACc,UAAlB,CAAnB;;EAEA,IAAI,EAAC,MAAMtB,YAAY,CAACoD,MAAb,CACP;IAAE1C,IAAI,EAAE;EAAR,CADO,EAEPQ,OAFO,EAGP,IAAAH,oBAAA,EAAaP,IAAI,CAACwB,GAAlB,CAHO,EAIPV,UAJO,CAAP,CAAJ,EAKG;IACC,MAAM,IAAIT,KAAJ,CAAW,2BAA0BH,IAAK,WAA1C,CAAN;EACH;;EAED,MAAM2C,SAAS,GAAG,MAAMrD,YAAY,CAACsD,OAAb,CACpB;IACI5C,IAAI,EAAE,SADV;IAEIsC,OAAO,EAAE,IAAAjC,oBAAA,EAAaP,IAAI,CAACM,EAAlB,CAFb;IAGImC,MAAM,EAAE;EAHZ,CADoB,EAMpBhC,MANoB,EAOpBK,UAPoB,CAAxB;EAUA,OAAO,IAAIiC,WAAJ,GAAkBC,MAAlB,CAAyB,IAAIlD,UAAJ,CAAe+C,SAAf,CAAzB,CAAP;AACH;;AAED,eAAeV,iBAAf,CAAiClC,GAAjC,EAAkDC,IAAlD,EAAiG;EAC7F,MAAM+C,OAAO,GAAG,MAAMzD,YAAY,CAAC0D,SAAb,CAClB,KADkB,EAElBjD,GAFkB,EAGlB;IAAEC,IAAI,EAAE;EAAR,CAHkB,EAIlB,KAJkB,EAKlB,CAAC,YAAD,CALkB,CAAtB;EAOA,MAAMiD,OAAO,GAAG,MAAM3D,YAAY,CAAC4D,UAAb,CAClB;IACIlD,IAAI,EAAE,MADV;IAEImD,IAAI,EAAExD,QAFV;IAGI;IACA;IACAyD,IAAI,EAAG,IAAIjB,WAAJ,GAAkBC,MAAlB,CAAyBpC,IAAzB,CALX;IAMIqD,IAAI,EAAE;EANV,CADkB,EASlBN,OATkB,EAUlB,GAVkB,CAAtB;EAaA,MAAMxC,MAAM,GAAG0C,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAf;EACA,MAAM9C,OAAO,GAAGyC,OAAO,CAACK,KAAR,CAAc,EAAd,CAAhB;EAEA,MAAMC,OAAO,GAAGjE,YAAY,CAAC0D,SAAb,CACZ,KADY,EAEZzC,MAFY,EAGZ;IAAEP,IAAI,EAAE;EAAR,CAHY,EAIZ,KAJY,EAKZ,CAAC,SAAD,EAAY,SAAZ,CALY,CAAhB;EAQA,MAAMwD,QAAQ,GAAGlE,YAAY,CAAC0D,SAAb,CACb,KADa,EAEbxC,OAFa,EAGb;IACIR,IAAI,EAAE,MADV;IAEIqD,IAAI,EAAE;MAAErD,IAAI,EAAE;IAAR;EAFV,CAHa,EAOb,KAPa,EAQb,CAAC,MAAD,EAAS,QAAT,CARa,CAAjB;EAWA,OAAOyD,OAAO,CAACC,GAAR,CAAY,CAACH,OAAD,EAAUC,QAAV,CAAZ,CAAP;AACH;;AAEM,SAASG,UAAT,CAAoB7D,IAApB,EAAkCC,GAAlC,EAAmDC,IAAnD,EAAiEC,KAAjE,EAA6G;EAChH,OAAOX,YAAY,GAAGyC,cAAc,CAACjC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,KAAlB,CAAjB,GAA4CJ,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,KAAlB,CAA1E;AACH;;AAEM,SAAS2D,UAAT,CAAoB9D,IAApB,EAA6CC,GAA7C,EAA8DC,IAA9D,EAA6F;EAChG,OAAOV,YAAY,GAAGmD,cAAc,CAAC3C,IAAD,EAAOC,GAAP,EAAYC,IAAZ,CAAjB,GAAqCuB,WAAW,CAACzB,IAAD,EAAOC,GAAP,EAAYC,IAAZ,CAAnE;AACH,C,CAED;;;AACA,MAAM6D,QAAQ,GAAG,kEAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,iBAAT,CAA2B/D,GAA3B,EAA4CK,EAA5C,EAAqF;EACxF,OAAOuD,UAAU,CAACE,QAAD,EAAW9D,GAAX,EAAgB,EAAhB,EAAoBK,EAApB,CAAjB;AACH"}