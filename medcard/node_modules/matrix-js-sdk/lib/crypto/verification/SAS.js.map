{"version":3,"file":"SAS.js","names":["START_TYPE","EVENTS","olmutil","newMismatchedSASError","errorFactory","newMismatchedCommitmentError","generateDecimalSas","sasBytes","emojiMapping","generateEmojiSas","emojis","map","num","sasGenerators","decimal","emoji","generateSas","methods","sas","method","macMethods","calculateMAC","olmSAS","args","macFunction","mac","apply","logger","log","calculateKeyAgreement","bytes","ourInfo","baseApis","getUserId","deviceId","ourSASPubKey","theirInfo","userId","theirSASPubKey","sasInfo","initiatedByMe","channel","transactionId","generate_bytes","KEY_AGREEMENT_LIST","HASHES_LIST","MAC_LIST","SAS_LIST","Object","keys","KEY_AGREEMENT_SET","Set","HASHES_SET","MAC_SET","SAS_SET","intersection","anArray","aSet","Array","filter","x","has","SasEvent","SAS","Base","global","Olm","init","Utility","downloadKeys","retry","doSendVerification","doRespondVerification","err","SwitchStartEventError","startEvent","NAME","events","canSwitchStartEvent","event","getType","content","getContent","waitingForAccept","sendStart","startContent","completeContent","from_device","key_agreement_protocols","hashes","message_authentication_codes","short_authentication_string","sendCompleted","completedContentFromEvent","e","waitForEvent","sasMethods","key_agreement_protocol","hash","message_authentication_code","length","newUnknownMethodError","commitment","newInvalidMessageError","keyAgreement","macMethod","hashCommitment","get_pubkey","send","key","commitmentStr","anotherjson","stringify","sha256","set_their_key","verifySAS","Promise","resolve","reject","sasEvent","confirm","sendMAC","cancel","newUserCancelledError","mismatch","emit","ShowSas","all","then","expectedEvent","checkMAC","free","hashMethod","undefined","keyList","baseInfo","deviceKeyId","getDeviceEd25519Key","push","crossSigningId","getCrossSigningId","crossSigningKeyId","sort","join","newKeyMismatchError","verifyKeys","keyId","device","keyInfo"],"sources":["../../../src/crypto/verification/SAS.ts"],"sourcesContent":["/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Short Authentication String (SAS) verification.\n * @module crypto/verification/SAS\n */\n\nimport anotherjson from 'another-json';\nimport { Utility, SAS as OlmSAS } from \"@matrix-org/olm\";\n\nimport { VerificationBase as Base, SwitchStartEventError, VerificationEventHandlerMap } from \"./Base\";\nimport {\n    errorFactory,\n    newInvalidMessageError,\n    newKeyMismatchError,\n    newUnknownMethodError,\n    newUserCancelledError,\n} from './Error';\nimport { logger } from '../../logger';\nimport { IContent, MatrixEvent } from \"../../models/event\";\n\nconst START_TYPE = \"m.key.verification.start\";\n\nconst EVENTS = [\n    \"m.key.verification.accept\",\n    \"m.key.verification.key\",\n    \"m.key.verification.mac\",\n];\n\nlet olmutil: Utility;\n\nconst newMismatchedSASError = errorFactory(\n    \"m.mismatched_sas\", \"Mismatched short authentication string\",\n);\n\nconst newMismatchedCommitmentError = errorFactory(\n    \"m.mismatched_commitment\", \"Mismatched commitment\",\n);\n\nfunction generateDecimalSas(sasBytes: number[]): [number, number, number] {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000,\n    ];\n}\n\ntype EmojiMapping = [emoji: string, name: string];\n\nconst emojiMapping: EmojiMapping[] = [\n    [\"🐶\", \"dog\"],        //  0\n    [\"🐱\", \"cat\"],        //  1\n    [\"🦁\", \"lion\"],       //  2\n    [\"🐎\", \"horse\"],      //  3\n    [\"🦄\", \"unicorn\"],    //  4\n    [\"🐷\", \"pig\"],        //  5\n    [\"🐘\", \"elephant\"],   //  6\n    [\"🐰\", \"rabbit\"],     //  7\n    [\"🐼\", \"panda\"],      //  8\n    [\"🐓\", \"rooster\"],    //  9\n    [\"🐧\", \"penguin\"],    // 10\n    [\"🐢\", \"turtle\"],     // 11\n    [\"🐟\", \"fish\"],       // 12\n    [\"🐙\", \"octopus\"],    // 13\n    [\"🦋\", \"butterfly\"],  // 14\n    [\"🌷\", \"flower\"],     // 15\n    [\"🌳\", \"tree\"],       // 16\n    [\"🌵\", \"cactus\"],     // 17\n    [\"🍄\", \"mushroom\"],   // 18\n    [\"🌏\", \"globe\"],      // 19\n    [\"🌙\", \"moon\"],       // 20\n    [\"☁️\", \"cloud\"],       // 21\n    [\"🔥\", \"fire\"],       // 22\n    [\"🍌\", \"banana\"],     // 23\n    [\"🍎\", \"apple\"],      // 24\n    [\"🍓\", \"strawberry\"], // 25\n    [\"🌽\", \"corn\"],       // 26\n    [\"🍕\", \"pizza\"],      // 27\n    [\"🎂\", \"cake\"],       // 28\n    [\"❤️\", \"heart\"],      // 29\n    [\"🙂\", \"smiley\"],      // 30\n    [\"🤖\", \"robot\"],      // 31\n    [\"🎩\", \"hat\"],        // 32\n    [\"👓\", \"glasses\"],    // 33\n    [\"🔧\", \"spanner\"],     // 34\n    [\"🎅\", \"santa\"],      // 35\n    [\"👍\", \"thumbs up\"],  // 36\n    [\"☂️\", \"umbrella\"],    // 37\n    [\"⌛\", \"hourglass\"],   // 38\n    [\"⏰\", \"clock\"],      // 39\n    [\"🎁\", \"gift\"],       // 40\n    [\"💡\", \"light bulb\"], // 41\n    [\"📕\", \"book\"],       // 42\n    [\"✏️\", \"pencil\"],     // 43\n    [\"📎\", \"paperclip\"],  // 44\n    [\"✂️\", \"scissors\"],    // 45\n    [\"🔒\", \"lock\"],       // 46\n    [\"🔑\", \"key\"],        // 47\n    [\"🔨\", \"hammer\"],     // 48\n    [\"☎️\", \"telephone\"],  // 49\n    [\"🏁\", \"flag\"],       // 50\n    [\"🚂\", \"train\"],      // 51\n    [\"🚲\", \"bicycle\"],    // 52\n    [\"✈️\", \"aeroplane\"],   // 53\n    [\"🚀\", \"rocket\"],     // 54\n    [\"🏆\", \"trophy\"],     // 55\n    [\"⚽\", \"ball\"],       // 56\n    [\"🎸\", \"guitar\"],     // 57\n    [\"🎺\", \"trumpet\"],    // 58\n    [\"🔔\", \"bell\"],       // 59\n    [\"⚓️\", \"anchor\"],     // 60\n    [\"🎧\", \"headphones\"], // 61\n    [\"📁\", \"folder\"],     // 62\n    [\"📌\", \"pin\"],        // 63\n];\n\nfunction generateEmojiSas(sasBytes: number[]): EmojiMapping[] {\n    const emojis = [\n        // just like base64 encoding\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6,\n    ];\n\n    return emojis.map((num) => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas,\n};\n\nexport interface IGeneratedSas {\n    decimal?: [number, number, number];\n    emoji?: EmojiMapping[];\n}\n\nexport interface ISasEvent {\n    sas: IGeneratedSas;\n    confirm(): Promise<void>;\n    cancel(): void;\n    mismatch(): void;\n}\n\nfunction generateSas(sasBytes: number[], methods: string[]): IGeneratedSas {\n    const sas: IGeneratedSas = {};\n    for (const method of methods) {\n        if (method in sasGenerators) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n    return sas;\n}\n\nconst macMethods = {\n    \"hkdf-hmac-sha256\": \"calculate_mac\",\n    \"org.matrix.msc3783.hkdf-hmac-sha256\": \"calculate_mac_fixed_base64\",\n    \"hmac-sha256\": \"calculate_mac_long_kdf\",\n};\n\nfunction calculateMAC(olmSAS: OlmSAS, method: string) {\n    return function(...args) {\n        const macFunction = olmSAS[macMethods[method]];\n        const mac = macFunction.apply(olmSAS, args);\n        logger.log(\"SAS calculateMAC:\", method, args, mac);\n        return mac;\n    };\n}\n\nconst calculateKeyAgreement = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"curve25519-hkdf-sha256\": function(sas: SAS, olmSAS: OlmSAS, bytes: number): Uint8Array {\n        const ourInfo = `${sas.baseApis.getUserId()}|${sas.baseApis.deviceId}|`\n              + `${sas.ourSASPubKey}|`;\n        const theirInfo = `${sas.userId}|${sas.deviceId}|${sas.theirSASPubKey}|`;\n        const sasInfo =\n            \"MATRIX_KEY_VERIFICATION_SAS|\"\n              + (sas.initiatedByMe ? ourInfo + theirInfo : theirInfo + ourInfo)\n              + sas.channel.transactionId;\n        return olmSAS.generate_bytes(sasInfo, bytes);\n    },\n    \"curve25519\": function(sas: SAS, olmSAS: OlmSAS, bytes: number): Uint8Array {\n        const ourInfo = `${sas.baseApis.getUserId()}${sas.baseApis.deviceId}`;\n        const theirInfo = `${sas.userId}${sas.deviceId}`;\n        const sasInfo =\n            \"MATRIX_KEY_VERIFICATION_SAS\"\n              + (sas.initiatedByMe ? ourInfo + theirInfo : theirInfo + ourInfo)\n              + sas.channel.transactionId;\n        return olmSAS.generate_bytes(sasInfo, bytes);\n    },\n};\n\n/* lists of algorithms/methods that are supported.  The key agreement, hashes,\n * and MAC lists should be sorted in order of preference (most preferred\n * first).\n */\nconst KEY_AGREEMENT_LIST = [\"curve25519-hkdf-sha256\", \"curve25519\"];\nconst HASHES_LIST = [\"sha256\"];\nconst MAC_LIST = [\"org.matrix.msc3783.hkdf-hmac-sha256\", \"hkdf-hmac-sha256\", \"hmac-sha256\"];\nconst SAS_LIST = Object.keys(sasGenerators);\n\nconst KEY_AGREEMENT_SET = new Set(KEY_AGREEMENT_LIST);\nconst HASHES_SET = new Set(HASHES_LIST);\nconst MAC_SET = new Set(MAC_LIST);\nconst SAS_SET = new Set(SAS_LIST);\n\nfunction intersection<T>(anArray: T[], aSet: Set<T>): T[] {\n    return anArray instanceof Array ? anArray.filter(x => aSet.has(x)) : [];\n}\n\nexport enum SasEvent {\n    ShowSas = \"show_sas\",\n}\n\ntype EventHandlerMap = {\n    [SasEvent.ShowSas]: (sas: ISasEvent) => void;\n} & VerificationEventHandlerMap;\n\n/**\n * @alias module:crypto/verification/SAS\n * @extends {module:crypto/verification/Base}\n */\nexport class SAS extends Base<SasEvent, EventHandlerMap> {\n    private waitingForAccept: boolean;\n    public ourSASPubKey: string;\n    public theirSASPubKey: string;\n    public sasEvent: ISasEvent;\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static get NAME(): string {\n        return \"m.sas.v1\";\n    }\n\n    public get events(): string[] {\n        return EVENTS;\n    }\n\n    protected doVerification = async (): Promise<void> => {\n        await global.Olm.init();\n        olmutil = olmutil || new global.Olm.Utility();\n\n        // make sure user's keys are downloaded\n        await this.baseApis.downloadKeys([this.userId]);\n\n        let retry = false;\n        do {\n            try {\n                if (this.initiatedByMe) {\n                    return await this.doSendVerification();\n                } else {\n                    return await this.doRespondVerification();\n                }\n            } catch (err) {\n                if (err instanceof SwitchStartEventError) {\n                    // this changes what initiatedByMe returns\n                    this.startEvent = err.startEvent;\n                    retry = true;\n                } else {\n                    throw err;\n                }\n            }\n        } while (retry);\n    };\n\n    public canSwitchStartEvent(event: MatrixEvent): boolean {\n        if (event.getType() !== START_TYPE) {\n            return false;\n        }\n        const content = event.getContent();\n        return content && content.method === SAS.NAME && this.waitingForAccept;\n    }\n\n    private async sendStart(): Promise<Record<string, any>> {\n        const startContent = this.channel.completeContent(START_TYPE, {\n            method: SAS.NAME,\n            from_device: this.baseApis.deviceId,\n            key_agreement_protocols: KEY_AGREEMENT_LIST,\n            hashes: HASHES_LIST,\n            message_authentication_codes: MAC_LIST,\n            // FIXME: allow app to specify what SAS methods can be used\n            short_authentication_string: SAS_LIST,\n        });\n        await this.channel.sendCompleted(START_TYPE, startContent);\n        return startContent;\n    }\n\n    private async doSendVerification(): Promise<void> {\n        this.waitingForAccept = true;\n        let startContent;\n        if (this.startEvent) {\n            startContent = this.channel.completedContentFromEvent(this.startEvent);\n        } else {\n            startContent = await this.sendStart();\n        }\n\n        // we might have switched to a different start event,\n        // but was we didn't call _waitForEvent there was no\n        // call that could throw yet. So check manually that\n        // we're still on the initiator side\n        if (!this.initiatedByMe) {\n            throw new SwitchStartEventError(this.startEvent);\n        }\n\n        let e;\n        try {\n            e = await this.waitForEvent(\"m.key.verification.accept\");\n        } finally {\n            this.waitingForAccept = false;\n        }\n        let content = e.getContent();\n        const sasMethods\n              = intersection(content.short_authentication_string, SAS_SET);\n        if (!(KEY_AGREEMENT_SET.has(content.key_agreement_protocol)\n              && HASHES_SET.has(content.hash)\n              && MAC_SET.has(content.message_authentication_code)\n              && sasMethods.length)) {\n            throw newUnknownMethodError();\n        }\n        if (typeof content.commitment !== \"string\") {\n            throw newInvalidMessageError();\n        }\n        const keyAgreement = content.key_agreement_protocol;\n        const macMethod = content.message_authentication_code;\n        const hashCommitment = content.commitment;\n        const olmSAS = new global.Olm.SAS();\n        try {\n            this.ourSASPubKey = olmSAS.get_pubkey();\n            await this.send(\"m.key.verification.key\", {\n                key: this.ourSASPubKey,\n            });\n\n            e = await this.waitForEvent(\"m.key.verification.key\");\n            // FIXME: make sure event is properly formed\n            content = e.getContent();\n            const commitmentStr = content.key + anotherjson.stringify(startContent);\n            // TODO: use selected hash function (when we support multiple)\n            if (olmutil.sha256(commitmentStr) !== hashCommitment) {\n                throw newMismatchedCommitmentError();\n            }\n            this.theirSASPubKey = content.key;\n            olmSAS.set_their_key(content.key);\n\n            const sasBytes = calculateKeyAgreement[keyAgreement](this, olmSAS, 6);\n            const verifySAS = new Promise<void>((resolve, reject) => {\n                this.sasEvent = {\n                    sas: generateSas(sasBytes, sasMethods),\n                    confirm: async () => {\n                        try {\n                            await this.sendMAC(olmSAS, macMethod);\n                            resolve();\n                        } catch (err) {\n                            reject(err);\n                        }\n                    },\n                    cancel: () => reject(newUserCancelledError()),\n                    mismatch: () => reject(newMismatchedSASError()),\n                };\n                this.emit(SasEvent.ShowSas, this.sasEvent);\n            });\n\n            [e] = await Promise.all([\n                this.waitForEvent(\"m.key.verification.mac\")\n                    .then((e) => {\n                        // we don't expect any more messages from the other\n                        // party, and they may send a m.key.verification.done\n                        // when they're done on their end\n                        this.expectedEvent = \"m.key.verification.done\";\n                        return e;\n                    }),\n                verifySAS,\n            ]);\n            content = e.getContent();\n            await this.checkMAC(olmSAS, content, macMethod);\n        } finally {\n            olmSAS.free();\n        }\n    }\n\n    private async doRespondVerification(): Promise<void> {\n        // as m.related_to is not included in the encrypted content in e2e rooms,\n        // we need to make sure it is added\n        let content = this.channel.completedContentFromEvent(this.startEvent);\n\n        // Note: we intersect using our pre-made lists, rather than the sets,\n        // so that the result will be in our order of preference.  Then\n        // fetching the first element from the array will give our preferred\n        // method out of the ones offered by the other party.\n        const keyAgreement = intersection(KEY_AGREEMENT_LIST, new Set(content.key_agreement_protocols))[0];\n        const hashMethod = intersection(HASHES_LIST, new Set(content.hashes))[0];\n        const macMethod = intersection(MAC_LIST, new Set(content.message_authentication_codes))[0];\n        // FIXME: allow app to specify what SAS methods can be used\n        const sasMethods = intersection(content.short_authentication_string, SAS_SET);\n        if (!(keyAgreement !== undefined && hashMethod !== undefined && macMethod !== undefined && sasMethods.length)) {\n            throw newUnknownMethodError();\n        }\n\n        const olmSAS = new global.Olm.SAS();\n        try {\n            const commitmentStr = olmSAS.get_pubkey() + anotherjson.stringify(content);\n            await this.send(\"m.key.verification.accept\", {\n                key_agreement_protocol: keyAgreement,\n                hash: hashMethod,\n                message_authentication_code: macMethod,\n                short_authentication_string: sasMethods,\n                // TODO: use selected hash function (when we support multiple)\n                commitment: olmutil.sha256(commitmentStr),\n            });\n\n            let e = await this.waitForEvent(\"m.key.verification.key\");\n            // FIXME: make sure event is properly formed\n            content = e.getContent();\n            this.theirSASPubKey = content.key;\n            olmSAS.set_their_key(content.key);\n            this.ourSASPubKey = olmSAS.get_pubkey();\n            await this.send(\"m.key.verification.key\", {\n                key: this.ourSASPubKey,\n            });\n\n            const sasBytes = calculateKeyAgreement[keyAgreement](this, olmSAS, 6);\n            const verifySAS = new Promise<void>((resolve, reject) => {\n                this.sasEvent = {\n                    sas: generateSas(sasBytes, sasMethods),\n                    confirm: async () => {\n                        try {\n                            await this.sendMAC(olmSAS, macMethod);\n                            resolve();\n                        } catch (err) {\n                            reject(err);\n                        }\n                    },\n                    cancel: () => reject(newUserCancelledError()),\n                    mismatch: () => reject(newMismatchedSASError()),\n                };\n                this.emit(SasEvent.ShowSas, this.sasEvent);\n            });\n\n            [e] = await Promise.all([\n                this.waitForEvent(\"m.key.verification.mac\")\n                    .then((e) => {\n                        // we don't expect any more messages from the other\n                        // party, and they may send a m.key.verification.done\n                        // when they're done on their end\n                        this.expectedEvent = \"m.key.verification.done\";\n                        return e;\n                    }),\n                verifySAS,\n            ]);\n            content = e.getContent();\n            await this.checkMAC(olmSAS, content, macMethod);\n        } finally {\n            olmSAS.free();\n        }\n    }\n\n    private sendMAC(olmSAS: OlmSAS, method: string): Promise<void> {\n        const mac = {};\n        const keyList = [];\n        const baseInfo = \"MATRIX_KEY_VERIFICATION_MAC\"\n              + this.baseApis.getUserId() + this.baseApis.deviceId\n              + this.userId + this.deviceId\n              + this.channel.transactionId;\n\n        const deviceKeyId = `ed25519:${this.baseApis.deviceId}`;\n        mac[deviceKeyId] = calculateMAC(olmSAS, method)(\n            this.baseApis.getDeviceEd25519Key(),\n            baseInfo + deviceKeyId,\n        );\n        keyList.push(deviceKeyId);\n\n        const crossSigningId = this.baseApis.getCrossSigningId();\n        if (crossSigningId) {\n            const crossSigningKeyId = `ed25519:${crossSigningId}`;\n            mac[crossSigningKeyId] = calculateMAC(olmSAS, method)(\n                crossSigningId,\n                baseInfo + crossSigningKeyId,\n            );\n            keyList.push(crossSigningKeyId);\n        }\n\n        const keys = calculateMAC(olmSAS, method)(\n            keyList.sort().join(\",\"),\n            baseInfo + \"KEY_IDS\",\n        );\n        return this.send(\"m.key.verification.mac\", { mac, keys });\n    }\n\n    private async checkMAC(olmSAS: OlmSAS, content: IContent, method: string): Promise<void> {\n        const baseInfo = \"MATRIX_KEY_VERIFICATION_MAC\"\n              + this.userId + this.deviceId\n              + this.baseApis.getUserId() + this.baseApis.deviceId\n              + this.channel.transactionId;\n\n        if (content.keys !== calculateMAC(olmSAS, method)(\n            Object.keys(content.mac).sort().join(\",\"),\n            baseInfo + \"KEY_IDS\",\n        )) {\n            throw newKeyMismatchError();\n        }\n\n        await this.verifyKeys(this.userId, content.mac, (keyId, device, keyInfo) => {\n            if (keyInfo !== calculateMAC(olmSAS, method)(\n                device.keys[keyId],\n                baseInfo + keyId,\n            )) {\n                throw newKeyMismatchError();\n            }\n        });\n    }\n}\n"],"mappings":"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"}