{"version":3,"file":"RoomList.js","names":["RoomList","constructor","cryptoStore","init","doTxn","IndexedDBCryptoStore","STORE_ROOMS","txn","getEndToEndRooms","result","roomEncryption","getRoomEncryption","roomId","isRoomEncrypted","Boolean","setRoomEncryption","roomInfo","storeEndToEndRoom"],"sources":["../../src/crypto/RoomList.ts"],"sourcesContent":["/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/RoomList\n *\n * Manages the list of encrypted rooms\n */\n\nimport { CryptoStore } from './store/base';\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\n\n/* eslint-disable camelcase */\nexport interface IRoomEncryption {\n    algorithm: string;\n    rotation_period_ms?: number;\n    rotation_period_msgs?: number;\n}\n/* eslint-enable camelcase */\n\n/**\n * @alias module:crypto/RoomList\n */\nexport class RoomList {\n    // Object of roomId -> room e2e info object (body of the m.room.encryption event)\n    private roomEncryption: Record<string, IRoomEncryption> = {};\n\n    constructor(private readonly cryptoStore: CryptoStore) {}\n\n    public async init(): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this.cryptoStore.getEndToEndRooms(txn, (result) => {\n                    this.roomEncryption = result;\n                });\n            },\n        );\n    }\n\n    public getRoomEncryption(roomId: string): IRoomEncryption {\n        return this.roomEncryption[roomId] || null;\n    }\n\n    public isRoomEncrypted(roomId: string): boolean {\n        return Boolean(this.getRoomEncryption(roomId));\n    }\n\n    public async setRoomEncryption(roomId: string, roomInfo: IRoomEncryption): Promise<void> {\n        // important that this happens before calling into the store\n        // as it prevents the Crypto::setRoomEncryption from calling\n        // this twice for consecutive m.room.encryption events\n        this.roomEncryption[roomId] = roomInfo;\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this.cryptoStore.storeEndToEndRoom(roomId, roomInfo, txn);\n            },\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;AAuBA;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAWA;;AAEA;AACA;AACA;AACO,MAAMA,QAAN,CAAe;EAClB;EAGAC,WAAW,CAAkBC,WAAlB,EAA4C;IAAA,KAA1BA,WAA0B,GAA1BA,WAA0B;IAAA,sDAFG,EAEH;EAAE;;EAExC,MAAJC,IAAI,GAAkB;IAC/B,MAAM,KAAKD,WAAL,CAAiBE,KAAjB,CACF,WADE,EACW,CAACC,0CAAA,CAAqBC,WAAtB,CADX,EACgDC,GAAD,IAAS;MACtD,KAAKL,WAAL,CAAiBM,gBAAjB,CAAkCD,GAAlC,EAAwCE,MAAD,IAAY;QAC/C,KAAKC,cAAL,GAAsBD,MAAtB;MACH,CAFD;IAGH,CALC,CAAN;EAOH;;EAEME,iBAAiB,CAACC,MAAD,EAAkC;IACtD,OAAO,KAAKF,cAAL,CAAoBE,MAApB,KAA+B,IAAtC;EACH;;EAEMC,eAAe,CAACD,MAAD,EAA0B;IAC5C,OAAOE,OAAO,CAAC,KAAKH,iBAAL,CAAuBC,MAAvB,CAAD,CAAd;EACH;;EAE6B,MAAjBG,iBAAiB,CAACH,MAAD,EAAiBI,QAAjB,EAA2D;IACrF;IACA;IACA;IACA,KAAKN,cAAL,CAAoBE,MAApB,IAA8BI,QAA9B;IACA,MAAM,KAAKd,WAAL,CAAiBE,KAAjB,CACF,WADE,EACW,CAACC,0CAAA,CAAqBC,WAAtB,CADX,EACgDC,GAAD,IAAS;MACtD,KAAKL,WAAL,CAAiBe,iBAAjB,CAAmCL,MAAnC,EAA2CI,QAA3C,EAAqDT,GAArD;IACH,CAHC,CAAN;EAKH;;AAlCiB"}